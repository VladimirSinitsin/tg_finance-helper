"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞: t.me/CuteBudgetBot
"""
# import telebot
# from telebot import types
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData

import DBMS
import time
from bot_config import TOKEN


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
bot = Bot(token=TOKEN)
dp =  Dispatcher(bot)
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π.
products = {}


@dp.message_handler(commands=['start'])
async def send_welcome(message):
    # —Å–æ–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = KeyboardButton("/start")
    item2 = KeyboardButton("/help")
    item3 = KeyboardButton("/all")
    markup.add(item1, item2, item3)
    await message.answer( '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞\n''' +
                          '–í–≤–æ–¥–∏ —Å–≤–æ–∏ –ø–æ–∫—É–ø–∫–∏ –≤ –≤–∏–¥–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ - —Ü–µ–Ω–∞\n' +
                          '–ù–∞–ø—Ä–∏–º–µ—Ä: –±–∞–Ω–∞–Ω—ã - 300\n\n'
                          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start\n/help\n/all', reply_markup=markup)


@dp.message_handler(commands=['help'])
async def send_help(message):
    await message.answer('–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Ç–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º')


# –í–´–≤–æ–¥ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –∏ —Å—É–º–º —á–µ—Ä–µ–∑ /all.
@dp.message_handler(commands=['all'])
async def preview_all_products(message):
    global products
    if products:
        result = ''
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö —Å—É–º–º—ã –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞.
        for key, value in products.items():
            result += '{0}: {1}\n'.format(key, value)
        await message.answer('–í—Å—ë –ø–æ–∫—É–ø–∫–∏:\n\n' + result)
    else:
        await message.answer('–ü–æ–∫—É–ø–æ–∫ –Ω–µ –±—ã–ª–æ')


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏.
@dp.message_handler(content_types=["text"])
async def echo_product(message):
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –±–¥
    category_callback = CallbackData('Category', 'Name_category')
    markup = InlineKeyboardMarkup(row_width=1)
    for items in DBMS.all_categories():
        item = InlineKeyboardButton(items, callback_data=f"Category:{items}")
        markup.add(item)

    item = InlineKeyboardButton('–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data="Category:new")
    markup.add(item)
    # item1 = types.InlineKeyboardButton('üçé–ü—Ä–æ–¥—É–∫—Ç—ãüçé', callback_data='–ü—Ä–æ–¥—É–∫—Ç—ã')
    # item2 = types.InlineKeyboardButton('üëî–û–¥–µ–∂–¥–∞üëî', callback_data='–û–¥–µ–∂–¥–∞')
    # item3 = types.InlineKeyboardButton('üßÆ–°—á–µ—Ç–∞üßÆ', callback_data='–°—á–µ—Ç–∞')
    # item4 = types.InlineKeyboardButton('üöò–ê–≤—Ç–æ–º–æ–±–∏–ª—åüöò', callback_data='–ê–≤—Ç–æ–º–æ–±–∏–ª—å')
    # item5 = types.InlineKeyboardButton('üèÑ–î–æ—Å—É–≥üèÑ', callback_data='–î–æ—Å—É–≥')
    # item6 = types.InlineKeyboardButton('‚ùì–ü—Ä–æ—á–µ–µ‚ùì', callback_data='–ü—Ä–æ—á–µ–µ')
    # markup.add(item1, item2, item3, item4, item5, item6)

    global products


    # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∏—Ä—É–µ–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ.
    # if name_of_product in products:
    #     products[name_of_product] += value
    #     value = products[name_of_product]
    # else:
    #     products[name_of_product] = value
    #     bot.reply_to(message, '–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å "' + message.text + '"?ü§î', reply_markup=markup)
    # bot.reply_to(message, '–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {0}\n–Ω–∞ —Å—É–º–º—É: {1}'.format(name_of_product, value))

    # —Å–≤—è–∑—å –±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    # product = DBMS.product_exist(message.text)
    # if product.category == None:
    await message.reply(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markup)


# # —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
# @dp.callback_query_handler()
# async def answer(call, message):
#     if call.data == 'new':
#         await message.reply(message, '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
#     else:
#         product.category = call.data
#
#
# # –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –æ—Ç–≤–µ—Ç–∏—Ç—å –±–æ—Ç—É
# async def next_step(message):
#     global product
#     try:
#         categoria = message.text
#         product.category = categoria
#     except Exception as e:
#         await message.reply(message, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


if __name__ == '__main__':
    executor.start_polling(dp)

